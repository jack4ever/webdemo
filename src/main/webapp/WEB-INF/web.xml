<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">
	<display-name>webdemo</display-name>

	<!--spring bean的配置文件可以放在这里初始化，ContextLoaderListener会读取这些配置文件 -->
	<!-- <context-param> <param-name>contextConfigLocation</param-name> <param-value>classpath*:/applicationContext.xml</param-value> 
		</context-param> -->
	<!-- spring 监听器，可以初始化spring的配置文件 Spring会创建一个WebApplicationContext上下文，称为父上下文（父容器） 
		，保存在 ServletContext中 -->
	<!-- <listener> <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> 
		</listener> -->

	<!-- shiro -->
	<!-- 
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
 -->
	<!-- sitemesh filter配置 -->
	<filter>
		<filter-name>sitemeshFilter</filter-name>
		<filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemeshFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!-- spring mvc configuration DispatcherServlet是一个Servlet,可以同时配置多个，每个 DispatcherServlet有一个自己的 
		上下文对象（WebApplicationContext）， 称为子上下文（子容器），子上下文可以访问父上下文中的内容，但父上下文不能访问子上下文中的内容 -->
	<servlet>
		<servlet-name>springMvcServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/springMvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!-- 在DispatcherServlet的初始化过程中，框架会在web应用的 WEB-INF文件夹下寻找名为[servlet-name]-servlet.xml 
		的配置文件，生成文件中定义的bean 1、不写,使用默认值:/WEB-INF/<servlet-name>-servlet.xml 2、<param-value>/WEB-INF/classes/springMVC.xml</param-value> 
		3、<param-value>classpath*:springMVC-mvc.xml</param-value> 4、多个值用逗号分隔 -->

	<!-- 拦截 / 实现rest风格 1.也可以拦截 *.do,*.action之类的，不会对静态资源造成拦截 2.如果拦截/*，这是一个错误，可以走到action中，但转到jsp时会被再次拦截，不能访问jsp -->
	<servlet-mapping>
		<servlet-name>springMvcServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<welcome-file-list>
		<welcome-file>welcome.jsp</welcome-file>
	</welcome-file-list>
</web-app>
