<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- 自动扫描组件 -->
	<context:component-scan base-package="com.ycl"></context:component-scan>
	
	<!-- 默认的注解映射的支持 ，注册了RequestMappingHandlerMapping和RequestMappingHandlerAdapter-->
	<!-- 
		属性：enable-matrix-variables="true"
		作用：URI可以使用分号“;”，来分隔，并且传递参数。如：/user/123;q=11。在controller的方法参数中增加@MatrixVariable q，则q可以接受到参数11
	 -->
	<mvc:annotation-driven enable-matrix-variables="true"/>

	<!-- 定义JSP文件的位置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<!--方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<!-- <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" 
			/> -->
	</bean>

	<!-- 拦截器 -->
	<!-- <mvc:interceptors> <bean class="com.core.mvc.MyInteceptor" /> </mvc:interceptors> -->

	<!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL 对静态资源文件的访问 
		方案二 （二选一） -->
	<mvc:default-servlet-handler />

	<!-- 对静态资源文件的访问 方案二 （二选一） -->
	<!-- <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/> 
		<mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/> 
		<mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/> -->



	<!--********************* 拦截器 start *********************-->
		<!-- 方案一，（近似）总拦截器，拦截所有url ;如果是REST风格的URL，静态资源也会被拦截-->
		<!-- 
	<mvc:interceptors>
		<bean class="com.ycl.web.interceptor.MyInterceptor" />
	</mvc:interceptors>
	 -->
		<!--方案二， （近似） 总拦截器， 拦截匹配的URL。方案一多了一个URL匹配  -->
		<!--  
	<mvc:interceptors >    
	  <mvc:interceptor>    	       
	        <bean class="com.ycl.web.interceptor.MyInterceptor"></bean>    
	    </mvc:interceptor>    
	</mvc:interceptors>
	-->  
	<!--********************* 拦截器end *********************-->



	<!-- 定义无需Controller的url<->view直接映射 -->
	<!-- <mvc:view-controller path="/" view-name="redirect:/task"/> -->

	<!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> 
		<property name="exceptionMappings"> <props> <prop key="java.lang.Throwable">error/500</prop> 
		</props> </property> </bean> -->
		
		
	<!--********************* 全局异常处理********************* -->
	<!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
		<property name="exceptionMappings">  
			<props>  
				<prop key="java.lang.Throwable">error/500</prop>
            </props>  
		</property>  
    </bean>
	<!--********************* 全局异常处理********************* -->		
	
	
	
	<!-- shiro config -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- <property name="securityManager" ref="securityManager"/> -->
		<!--忽略其他， 详见与 Spring 集成部分 -->
	</bean>
</beans>
